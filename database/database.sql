-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.achievements (
  id integer NOT NULL DEFAULT nextval('achievements_id_seq'::regclass),
  key character varying NOT NULL UNIQUE,
  title character varying NOT NULL,
  description text NOT NULL,
  icon character varying NOT NULL,
  category character varying NOT NULL,
  points_reward integer DEFAULT 0,
  tier_required integer DEFAULT 1,
  criteria jsonb NOT NULL,
  active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT achievements_pkey PRIMARY KEY (id)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  ip_address inet,
  user_agent text,
  action text NOT NULL,
  entity_type text NOT NULL,
  entity_id uuid,
  old_values jsonb,
  new_values jsonb,
  request_id uuid,
  session_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.bookings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid NOT NULL,
  user_id uuid NOT NULL,
  status text NOT NULL DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'cancelled'::text, 'completed'::text, 'no_show'::text])),
  amount_usdc numeric,
  transaction_hash text,
  wallet_address text,
  dietary_restrictions ARRAY,
  special_requests text,
  checked_in_at timestamp with time zone,
  no_show_reported_at timestamp with time zone,
  booking_source text DEFAULT 'mobile_app'::text,
  confirmation_code text DEFAULT "substring"(md5((random())::text), 1, 8),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  cancelled_at timestamp with time zone,
  CONSTRAINT bookings_pkey PRIMARY KEY (id),
  CONSTRAINT bookings_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT bookings_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id)
);
CREATE TABLE public.bookings_backup (
  id uuid,
  event_id uuid,
  user_id uuid,
  status USER-DEFINED,
  payment_intent_id text,
  payment_status USER-DEFINED,
  amount_paid_cents integer,
  refund_amount_cents integer,
  checked_in_at timestamp with time zone,
  no_show_reported_at timestamp with time zone,
  dietary_restrictions ARRAY,
  accessibility_needs ARRAY,
  special_requests text,
  booking_source text,
  booking_ip inet,
  confirmation_code text,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  cancelled_at timestamp with time zone
);
CREATE TABLE public.connection_interactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  connection_id uuid NOT NULL,
  interaction_type character varying NOT NULL,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT connection_interactions_pkey PRIMARY KEY (id),
  CONSTRAINT connection_interactions_connection_id_fkey FOREIGN KEY (connection_id) REFERENCES public.connections(id)
);
CREATE TABLE public.connections (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  connected_user_id uuid NOT NULL,
  status character varying NOT NULL DEFAULT 'pending'::character varying,
  requested_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  connected_at timestamp with time zone,
  message text,
  dinners_together integer DEFAULT 0,
  last_interaction timestamp with time zone,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT connections_pkey PRIMARY KEY (id),
  CONSTRAINT connections_connected_user_id_fkey FOREIGN KEY (connected_user_id) REFERENCES public.users(id),
  CONSTRAINT connections_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.conversations (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  participant1_id uuid NOT NULL,
  participant2_id uuid NOT NULL,
  match_id uuid,
  event_id uuid,
  is_active boolean DEFAULT true,
  started_at timestamp with time zone NOT NULL DEFAULT now(),
  last_message_at timestamp with time zone,
  message_count integer DEFAULT 0,
  participant1_unread_count integer DEFAULT 0,
  participant2_unread_count integer DEFAULT 0,
  participant1_archived boolean DEFAULT false,
  participant2_archived boolean DEFAULT false,
  participant1_muted_until timestamp with time zone,
  participant2_muted_until timestamp with time zone,
  CONSTRAINT conversations_pkey PRIMARY KEY (id),
  CONSTRAINT conversations_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT conversations_participant2_id_fkey FOREIGN KEY (participant2_id) REFERENCES public.users(id),
  CONSTRAINT conversations_participant1_id_fkey FOREIGN KEY (participant1_id) REFERENCES public.users(id),
  CONSTRAINT conversations_match_id_fkey FOREIGN KEY (match_id) REFERENCES public.matches(id)
);
CREATE TABLE public.dinner_groups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  time_slot_id uuid NOT NULL,
  restaurant_name character varying NOT NULL,
  restaurant_address text NOT NULL,
  restaurant_cuisine character varying,
  reservation_time time without time zone NOT NULL,
  reservation_date date NOT NULL,
  group_size integer NOT NULL,
  max_size integer DEFAULT 6,
  min_size integer DEFAULT 4,
  status character varying DEFAULT 'pending'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  notified_at timestamp with time zone,
  completed_at timestamp with time zone,
  CONSTRAINT dinner_groups_pkey PRIMARY KEY (id),
  CONSTRAINT dinner_groups_time_slot_id_fkey FOREIGN KEY (time_slot_id) REFERENCES public.time_slots(id)
);
CREATE TABLE public.event_feedback (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  booking_id uuid NOT NULL UNIQUE,
  event_id uuid NOT NULL,
  user_id uuid NOT NULL,
  venue_rating smallint CHECK (venue_rating >= 1 AND venue_rating <= 5),
  food_rating smallint CHECK (food_rating >= 1 AND food_rating <= 5),
  service_rating smallint CHECK (service_rating >= 1 AND service_rating <= 5),
  atmosphere_rating smallint CHECK (atmosphere_rating >= 1 AND atmosphere_rating <= 5),
  overall_rating smallint CHECK (overall_rating >= 1 AND overall_rating <= 5),
  matches_quality_rating smallint CHECK (matches_quality_rating >= 1 AND matches_quality_rating <= 5),
  conversation_rating smallint CHECK (conversation_rating >= 1 AND conversation_rating <= 5),
  would_attend_again boolean,
  would_recommend boolean,
  connected_with_ids ARRAY,
  want_to_match_ids ARRAY,
  comments text,
  suggestions text,
  sentiment_score numeric,
  sentiment_magnitude numeric,
  submitted_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT event_feedback_pkey PRIMARY KEY (id),
  CONSTRAINT event_feedback_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT event_feedback_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.event_tables (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid NOT NULL,
  table_number integer NOT NULL,
  capacity integer NOT NULL DEFAULT 6,
  venue_table_id text,
  position_x numeric,
  position_y numeric,
  shape text DEFAULT 'round'::text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT event_tables_pkey PRIMARY KEY (id),
  CONSTRAINT event_tables_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id)
);
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title text NOT NULL,
  slug text NOT NULL UNIQUE,
  description text,
  event_type text NOT NULL,
  event_date date NOT NULL,
  start_time time without time zone NOT NULL,
  end_time time without time zone,
  timezone text NOT NULL DEFAULT 'America/Los_Angeles'::text,
  venue_id uuid,
  venue_details jsonb,
  min_capacity integer NOT NULL,
  max_capacity integer NOT NULL,
  current_capacity integer DEFAULT 0,
  price_cents integer NOT NULL,
  deposit_cents integer,
  target_age_range int4range,
  target_genders ARRAY,
  target_interests ARRAY,
  target_relationship_goals ARRAY,
  status USER-DEFINED NOT NULL DEFAULT 'draft'::event_status,
  booking_opens_at timestamp with time zone,
  booking_closes_at timestamp with time zone,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  cancelled_at timestamp with time zone,
  cancellation_reason text,
  CONSTRAINT events_pkey PRIMARY KEY (id),
  CONSTRAINT events_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id),
  CONSTRAINT events_venue_id_fkey FOREIGN KEY (venue_id) REFERENCES public.venues(id)
);
CREATE TABLE public.group_members (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  dinner_group_id uuid NOT NULL,
  user_id uuid NOT NULL,
  signup_id uuid NOT NULL,
  status character varying DEFAULT 'assigned'::character varying,
  notified boolean DEFAULT false,
  confirmed_attendance boolean DEFAULT false,
  attended boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT group_members_pkey PRIMARY KEY (id),
  CONSTRAINT group_members_signup_id_fkey FOREIGN KEY (signup_id) REFERENCES public.slot_signups(id),
  CONSTRAINT group_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT group_members_dinner_group_id_fkey FOREIGN KEY (dinner_group_id) REFERENCES public.dinner_groups(id)
);
CREATE TABLE public.leaderboards (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  period_type character varying NOT NULL CHECK (period_type::text = ANY (ARRAY['all_time'::character varying, 'monthly'::character varying, 'weekly'::character varying]::text[])),
  period_start date NOT NULL,
  period_end date,
  points integer DEFAULT 0,
  dinners_count integer DEFAULT 0,
  rank integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT leaderboards_pkey PRIMARY KEY (id),
  CONSTRAINT leaderboards_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.loyalty_items (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  description text NOT NULL,
  category character varying NOT NULL,
  points_cost integer NOT NULL,
  tier_required integer DEFAULT 1,
  stock_quantity integer,
  unlimited boolean DEFAULT false,
  valid_from timestamp with time zone DEFAULT now(),
  valid_until timestamp with time zone,
  metadata jsonb,
  active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT loyalty_items_pkey PRIMARY KEY (id)
);
CREATE TABLE public.loyalty_redemptions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  item_id uuid NOT NULL,
  points_spent integer NOT NULL,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'approved'::character varying, 'delivered'::character varying, 'cancelled'::character varying]::text[])),
  redemption_code character varying UNIQUE,
  redeemed_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  used_at timestamp with time zone,
  metadata jsonb,
  CONSTRAINT loyalty_redemptions_pkey PRIMARY KEY (id),
  CONSTRAINT loyalty_redemptions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT loyalty_redemptions_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.loyalty_items(id)
);
CREATE TABLE public.matches (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user1_id uuid NOT NULL,
  user2_id uuid NOT NULL,
  event_id uuid,
  table_id uuid,
  status USER-DEFINED NOT NULL DEFAULT 'potential'::match_status,
  compatibility_score numeric,
  conversation_score numeric,
  chemistry_score numeric,
  overall_score numeric DEFAULT ((((COALESCE(compatibility_score, (0)::numeric) + COALESCE(conversation_score, (0)::numeric)) + COALESCE(chemistry_score, (0)::numeric)) / (NULLIF(((
CASE
    WHEN (compatibility_score IS NOT NULL) THEN 1
    ELSE 0
END +
CASE
    WHEN (conversation_score IS NOT NULL) THEN 1
    ELSE 0
END) +
CASE
    WHEN (chemistry_score IS NOT NULL) THEN 1
    ELSE 0
END), 0))::numeric))::numeric(3,2),
  match_algorithm text,
  match_reasons jsonb,
  user1_liked boolean DEFAULT false,
  user2_liked boolean DEFAULT false,
  user1_liked_at timestamp with time zone,
  user2_liked_at timestamp with time zone,
  connected_at timestamp with time zone,
  first_message_at timestamp with time zone,
  last_interaction_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT matches_pkey PRIMARY KEY (id),
  CONSTRAINT matches_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT matches_user1_id_fkey FOREIGN KEY (user1_id) REFERENCES public.users(id),
  CONSTRAINT matches_user2_id_fkey FOREIGN KEY (user2_id) REFERENCES public.users(id),
  CONSTRAINT matches_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.event_tables(id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  conversation_id uuid NOT NULL,
  sender_id uuid NOT NULL,
  content text NOT NULL,
  content_type text DEFAULT 'text'::text,
  is_edited boolean DEFAULT false,
  edited_at timestamp with time zone,
  delivered_at timestamp with time zone,
  read_at timestamp with time zone,
  flagged_for_review boolean DEFAULT false,
  moderation_score numeric,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id),
  CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id)
);
CREATE TABLE public.ml_predictions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  model_name text NOT NULL,
  model_version text NOT NULL,
  prediction_type text NOT NULL,
  predictions jsonb NOT NULL,
  confidence_scores jsonb,
  feature_vector USER-DEFINED,
  feature_metadata jsonb,
  generated_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  CONSTRAINT ml_predictions_pkey PRIMARY KEY (id),
  CONSTRAINT ml_predictions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  type USER-DEFINED NOT NULL,
  title text NOT NULL,
  body text NOT NULL,
  related_user_id uuid,
  related_event_id uuid,
  related_match_id uuid,
  related_booking_id uuid,
  action_url text,
  is_read boolean DEFAULT false,
  read_at timestamp with time zone,
  sent_via_email boolean DEFAULT false,
  sent_via_push boolean DEFAULT false,
  sent_via_sms boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone DEFAULT (now() + '30 days'::interval),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_related_event_id_fkey FOREIGN KEY (related_event_id) REFERENCES public.events(id),
  CONSTRAINT notifications_related_match_id_fkey FOREIGN KEY (related_match_id) REFERENCES public.matches(id),
  CONSTRAINT notifications_related_user_id_fkey FOREIGN KEY (related_user_id) REFERENCES public.users(id),
  CONSTRAINT notifications_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.payment_transactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  booking_id uuid,
  stripe_payment_intent_id text UNIQUE,
  stripe_charge_id text,
  stripe_refund_id text,
  amount_cents integer NOT NULL,
  currency character NOT NULL DEFAULT 'USD'::bpchar,
  status USER-DEFINED NOT NULL,
  description text,
  metadata jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT payment_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT payment_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.point_rules (
  id integer NOT NULL DEFAULT nextval('point_rules_id_seq'::regclass),
  action_type character varying NOT NULL UNIQUE,
  base_points integer NOT NULL,
  multiplier_weekend numeric DEFAULT 1.0,
  multiplier_peak_hours numeric DEFAULT 1.0,
  multiplier_new_host numeric DEFAULT 1.0,
  daily_limit integer,
  weekly_limit integer,
  description text,
  active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT point_rules_pkey PRIMARY KEY (id)
);
CREATE TABLE public.point_transactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  action_type character varying NOT NULL,
  points integer NOT NULL,
  multipliers_applied jsonb,
  reference_id character varying,
  reference_type character varying,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT point_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT point_transactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.post_likes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  post_id uuid NOT NULL,
  user_id uuid NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT post_likes_pkey PRIMARY KEY (id),
  CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT fk_post FOREIGN KEY (post_id) REFERENCES public.posts(id)
);
CREATE TABLE public.posts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  content text NOT NULL,
  image_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_deleted boolean DEFAULT false,
  CONSTRAINT posts_pkey PRIMARY KEY (id),
  CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.quests (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  title character varying NOT NULL,
  description text NOT NULL,
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['daily'::character varying, 'weekly'::character varying, 'special'::character varying]::text[])),
  criteria jsonb NOT NULL,
  reward_points integer NOT NULL,
  reward_type character varying,
  reward_data jsonb,
  starts_at timestamp with time zone NOT NULL,
  ends_at timestamp with time zone NOT NULL,
  max_completions integer DEFAULT 1,
  tier_required integer DEFAULT 1,
  active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT quests_pkey PRIMARY KEY (id)
);
CREATE TABLE public.reservations (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  restaurant_id bigint,
  date date NOT NULL,
  time time without time zone NOT NULL,
  group_size smallint NOT NULL,
  first_name text,
  last_name text,
  email text,
  phone_number text,
  dietary_restrictions text,
  reservation_id text,
  reservation_system text,
  reservation_notes text,
  CONSTRAINT reservations_pkey PRIMARY KEY (id),
  CONSTRAINT reservations_restaurant_id_fkey FOREIGN KEY (restaurant_id) REFERENCES public.restaurants(id)
);
CREATE TABLE public.restaurants (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  old_id text UNIQUE,
  old_unique_key text UNIQUE,
  average_spending real,
  accepted boolean,
  reservable boolean,
  reservation_limited_to_6_or_more_people boolean,
  winebar boolean,
  revised_spending boolean,
  cuisine_safe text,
  hard_to_book boolean,
  dining_style text,
  deposit_rules text,
  reservation_link text,
  tasting_menu text,
  ambiance text,
  check_splitting text,
  owner_insights text,
  cuisine text,
  parking text,
  cuisine_type text,
  name text,
  CONSTRAINT restaurants_pkey PRIMARY KEY (id)
);
CREATE TABLE public.slot_signups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  time_slot_id uuid NOT NULL,
  user_id uuid NOT NULL,
  status character varying DEFAULT 'pending'::character varying,
  dietary_restrictions text,
  preferences text,
  signed_up_at timestamp with time zone DEFAULT now(),
  CONSTRAINT slot_signups_pkey PRIMARY KEY (id),
  CONSTRAINT slot_signups_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT slot_signups_time_slot_id_fkey FOREIGN KEY (time_slot_id) REFERENCES public.time_slots(id)
);
CREATE TABLE public.spatial_ref_sys (
  srid integer NOT NULL CHECK (srid > 0 AND srid <= 998999),
  auth_name character varying,
  auth_srid integer,
  srtext character varying,
  proj4text character varying,
  CONSTRAINT spatial_ref_sys_pkey PRIMARY KEY (srid)
);
CREATE TABLE public.table_assignments (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  table_id uuid NOT NULL,
  booking_id uuid NOT NULL,
  assignment_score numeric,
  assignment_reasons jsonb,
  manual_override boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  assigned_by uuid,
  CONSTRAINT table_assignments_pkey PRIMARY KEY (id),
  CONSTRAINT table_assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.users(id),
  CONSTRAINT table_assignments_table_id_fkey FOREIGN KEY (table_id) REFERENCES public.event_tables(id)
);
CREATE TABLE public.tiers (
  id integer NOT NULL DEFAULT nextval('tiers_id_seq'::regclass),
  tier_level integer NOT NULL UNIQUE,
  name character varying NOT NULL,
  points_required integer NOT NULL,
  dining_discount integer DEFAULT 0,
  priority_booking boolean DEFAULT false,
  exclusive_events boolean DEFAULT false,
  free_meals_monthly integer DEFAULT 0,
  referral_bonus integer DEFAULT 0,
  badge_color character varying NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT tiers_pkey PRIMARY KEY (id)
);
CREATE TABLE public.time_slots (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  slot_date date NOT NULL,
  slot_time time without time zone NOT NULL,
  day_of_week character varying NOT NULL,
  max_signups integer DEFAULT 100,
  current_signups integer DEFAULT 0,
  status character varying DEFAULT 'open'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  dinner_type character varying DEFAULT 'regular'::character varying CHECK (dinner_type::text = ANY (ARRAY['regular'::character varying, 'singles'::character varying]::text[])),
  CONSTRAINT time_slots_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_achievements (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  achievement_id integer NOT NULL,
  unlocked_at timestamp with time zone DEFAULT now(),
  notified boolean DEFAULT false,
  CONSTRAINT user_achievements_pkey PRIMARY KEY (id),
  CONSTRAINT user_achievements_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_achievements_achievement_id_fkey FOREIGN KEY (achievement_id) REFERENCES public.achievements(id)
);
CREATE TABLE public.user_behavior (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  session_id uuid NOT NULL,
  action text NOT NULL,
  target_type text,
  target_id uuid,
  page_url text,
  referrer_url text,
  user_agent text,
  ip_address inet,
  action_timestamp timestamp with time zone NOT NULL DEFAULT now(),
  time_spent_seconds integer,
  action_metadata jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_behavior_pkey PRIMARY KEY (id),
  CONSTRAINT user_behavior_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_interactions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  from_user_id uuid NOT NULL,
  to_user_id uuid NOT NULL,
  interaction_type USER-DEFINED NOT NULL,
  interaction_context text,
  event_id uuid,
  interaction_strength numeric DEFAULT 1.0,
  interaction_metadata jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_interactions_pkey PRIMARY KEY (id),
  CONSTRAINT user_interactions_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.events(id),
  CONSTRAINT user_interactions_to_user_id_fkey FOREIGN KEY (to_user_id) REFERENCES public.users(id),
  CONSTRAINT user_interactions_from_user_id_fkey FOREIGN KEY (from_user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_photos (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  url text NOT NULL,
  thumbnail_url text,
  blur_hash text,
  is_primary boolean DEFAULT false,
  is_verified boolean DEFAULT false,
  display_order smallint NOT NULL DEFAULT 0,
  face_detected boolean,
  face_landmarks jsonb,
  image_quality_score numeric,
  inappropriate_content_score numeric,
  ai_tags ARRAY,
  mime_type text,
  file_size_bytes integer,
  width_px integer,
  height_px integer,
  uploaded_at timestamp with time zone NOT NULL DEFAULT now(),
  verified_at timestamp with time zone,
  CONSTRAINT user_photos_pkey PRIMARY KEY (id),
  CONSTRAINT user_photos_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL UNIQUE,
  dietary_restrictions ARRAY DEFAULT '{}'::text[],
  alcohol_preferences character varying,
  spice_tolerance integer CHECK (spice_tolerance >= 1 AND spice_tolerance <= 10),
  preferred_cuisines ARRAY DEFAULT '{}'::text[],
  cuisine_love_levels jsonb DEFAULT '{}'::jsonb,
  cuisine_avoid ARRAY DEFAULT '{}'::text[],
  dining_atmospheres ARRAY DEFAULT '{}'::text[],
  dining_occasions ARRAY DEFAULT '{}'::text[],
  preferred_price_range ARRAY DEFAULT ARRAY[0, 100],
  group_size_preference character varying DEFAULT 'small_group'::character varying,
  location_zip_code character varying,
  max_travel_distance integer DEFAULT 10,
  preferred_times ARRAY DEFAULT '{}'::text[],
  preferred_days ARRAY DEFAULT '{}'::text[],
  social_preferences jsonb DEFAULT '{"goals": [], "interests": [], "languages": [], "social_level": 5, "social_media": {}, "adventure_level": 5, "formality_level": 5}'::jsonb,
  foodie_profile jsonb DEFAULT '{"bio": "", "hobbies": [], "fun_fact": "", "foodie_tags": [], "cooking_skill": "", "favorite_food": "", "food_bucket_list": ""}'::jsonb,
  notification_preferences jsonb DEFAULT '{"sms_enabled": false, "push_enabled": true, "email_enabled": true}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_profiles (
  user_id uuid NOT NULL,
  birth_date date,
  age_years integer DEFAULT calculate_age_years(birth_date),
  gender USER-DEFINED,
  nationality text,
  ethnicities ARRAY,
  education_level text,
  field_of_study text,
  university text,
  graduation_year integer,
  occupation text,
  employer text,
  income_range int4range,
  relationship_status USER-DEFINED,
  interested_in_genders ARRAY,
  age_preference_range int4range,
  wants_children boolean,
  has_children boolean,
  height_cm smallint,
  body_type text,
  smoking_habits text,
  exercise_frequency text,
  religion text,
  political_views text,
  mbti_type character,
  enneagram_type text,
  love_languages ARRAY,
  music_genres ARRAY,
  movie_genres ARRAY,
  preferred_locations ARRAY,
  ideal_first_date text,
  life_goals text,
  personality_vector USER-DEFINED,
  interests_vector USER-DEFINED,
  bio_embedding USER-DEFINED,
  profile_views_count integer DEFAULT 0,
  last_profile_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  profile_completion_score integer DEFAULT 0,
  CONSTRAINT user_profiles_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id)
);
CREATE TABLE public.user_quests (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  quest_id uuid NOT NULL,
  progress jsonb DEFAULT '{}'::jsonb,
  completed_count integer DEFAULT 0,
  last_completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_quests_pkey PRIMARY KEY (id),
  CONSTRAINT user_quests_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_quests_quest_id_fkey FOREIGN KEY (quest_id) REFERENCES public.quests(id)
);
CREATE TABLE public.user_stats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL UNIQUE,
  total_points integer DEFAULT 0,
  current_tier integer DEFAULT 1,
  dinners_attended integer DEFAULT 0,
  dinners_hosted integer DEFAULT 0,
  referrals_made integer DEFAULT 0,
  reviews_written integer DEFAULT 0,
  current_streak integer DEFAULT 0,
  longest_streak integer DEFAULT 0,
  last_activity_date date DEFAULT CURRENT_DATE,
  points_this_month integer DEFAULT 0,
  points_this_week integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_stats_pkey PRIMARY KEY (id),
  CONSTRAINT user_stats_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  email text UNIQUE CHECK (email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text),
  email_normalized text DEFAULT lower(email),
  phone text CHECK (phone IS NULL OR phone ~ '^\+?[1-9]\d{1,14}$'::text),
  external_auth_id text UNIQUE,
  email_verified_at timestamp with time zone,
  phone_verified_at timestamp with time zone,
  first_name text,
  last_name text,
  display_name text,
  status USER-DEFINED NOT NULL DEFAULT 'pending'::user_status,
  last_active_at timestamp with time zone,
  onboarding_completed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  deleted_at timestamp with time zone,
  role text DEFAULT 'user'::text CHECK (role = ANY (ARRAY['user'::text, 'admin'::text, 'moderator'::text])),
  auth_provider USER-DEFINED NOT NULL DEFAULT 'email'::auth_provider,
  onboarding_completed boolean DEFAULT false,
  wallet_address text UNIQUE,
  push_token text,
  push_token_updated_at timestamp with time zone,
  CONSTRAINT users_pkey PRIMARY KEY (id)
);
CREATE TABLE public.venues (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name text NOT NULL,
  slug text NOT NULL UNIQUE,
  description text,
  venue_type text NOT NULL,
  address_line1 text NOT NULL,
  address_line2 text,
  city text NOT NULL,
  state_province text,
  postal_code text,
  country_code character NOT NULL,
  location USER-DEFINED,
  cuisines ARRAY,
  price_range smallint CHECK (price_range >= 1 AND price_range <= 4),
  capacity integer,
  ambiance_tags ARRAY,
  amenities ARRAY,
  phone text,
  email text,
  website text,
  reservation_link text,
  avg_rating numeric,
  total_ratings integer DEFAULT 0,
  business_hours jsonb,
  logo_url text,
  cover_photo_url text,
  photo_urls ARRAY,
  is_active boolean DEFAULT true,
  is_featured boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT venues_pkey PRIMARY KEY (id)
);